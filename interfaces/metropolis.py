import numpy as np
import matplotlib.pyplot as plt
from typing import Optional, Callable, Union
from .target import TargetDistribution
from .target_torch import TorchTargetDistribution

class MHAlgorithm:
    """General purpose Metropolis-Hastings algorithm interface for sampling from a target distribution.

    This class is designed to be subclassed to implement specific calculations for the acceptance probability.
    The step method must be implemented in the subclass.
    
    The chain attribute stores the Markov chain of samples generated by the algorithm.
    The current state of the algorithm is the last element of the chain.
    """
    def __init__(self, dim, var, target_dist: Union[TargetDistribution, TorchTargetDistribution] = None, symmetric=True):
        self.dim = dim
        self.var = var
        self.target_dist = target_dist
        self.chain = [np.random.rand(dim)]
        self.symmetric = symmetric
        self.num_acceptances = 0    # use this to calculate acceptance rate
        self.acceptance_rate = 0
        self.target_density = target_dist.density

    def reset(self):
        """Reset the Markov chain to the initial state."""
        self.chain = [self.chain[0]]

    def step(self):
        """Take a step using the Metropolis-Hastings algorithm. Must be implemented in subclass."""
        raise NotImplementedError("Step method must be implemented in subclass")
    
    def get_curr_state(self):
        """Return the current state of the algorithm."""
        return self.chain[-1]
    
    def set_curr_state(self, state):
        """Set the current state of the algorithm."""
        self.chain[-1] = state

    def get_name(self):
        """Return the name of the algorithm as a string."""
        raise NotImplementedError("Subclasses must implement the get_name method.")

